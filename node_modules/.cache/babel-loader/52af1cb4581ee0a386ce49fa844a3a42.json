{"ast":null,"code":"var _jsxFileName = \"/home/rudrakshi/Desktop/Rose/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './Components/Header';\nimport Tasks from './Components/Tasks';\nimport AddTask from './Components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //fetch data\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random()*10000) + 1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  }; //Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle reminder\n\n\n  const toggleRemainder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleRemainder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 8\n    }, this) : 'No task to Show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rudrakshi/Desktop/Rose/react-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","id","filter","toggleRemainder","map","reminder","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,GAAG,GAAE,MAAK;AAAA;;AACd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMS,QAAQ,GAAG,YAAW;AAC1B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACD,KAHD;;AAIAD,IAAAA,QAAQ;AACT,GANQ,EAMP,EANO,CAAT,CAJc,CAYd;;AACA,QAAME,UAAU,GAAG,YAAW;AAC5B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAbc,CAmBd;;;AACA,QAAME,OAAO,GAAG,MAAMC,IAAN,IAAe;AAC7B,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAA+B;AACpDK,MAAAA,MAAM,EAAE,MAD4C;AAEpDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF2C;AAKpDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAL8C,KAA/B,CAAvB;AAOA,UAAMH,IAAI,GAAGF,GAAG,CAACG,IAAJ,EAAb;AAEAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,IAAX,CAAD,CAAR,CAV6B,CAW7B;AACA;AACA;AACD,GAdD,CApBc,CAoCd;;;AACA,QAAMS,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMX,KAAK,CAAE,8BAA6BW,EAAG,EAAlC,EAAoC;AAC7CN,MAAAA,MAAM,EAAE;AADqC,KAApC,CAAX;AAGAV,IAAAA,QAAQ,CAACD,KAAK,CAACkB,MAAN,CAAcR,IAAD,IAAUA,IAAI,CAACO,EAAL,KAAUA,EAAjC,CAAD,CAAR;AAED,GAND,CArCc,CA6Cd;;;AACA,QAAME,eAAe,GAAIF,EAAD,IAAO;AAC7BhB,IAAAA,QAAQ,CAACD,KAAK,CAACoB,GAAN,CAAWV,IAAD,IAASA,IAAI,CAACO,EAAL,KAAWA,EAAX,GAC5B,EAAC,GAAGP,IAAJ;AAASW,MAAAA,QAAQ,EAAE,CAACX,IAAI,CAACW;AAAzB,KAD4B,GACQX,IAD3B,CAAD,CAAR;AAED,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAKX,cAAc,CAAC,CAACD,WAAF,CAAlC;AACA,MAAA,OAAO,EAAEA;AADT;AAAA;AAAA;AAAA;AAAA,YADF,EAGGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEW;AAAhB;AAAA;AAAA;AAAA;AAAA,YAHlB,EAIGT,KAAK,CAACsB,MAAN,GAAe,CAAf,gBACA,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEtB,KAAd;AAAqB,MAAA,QAAQ,EAAEgB,UAA/B;AAA2C,MAAA,QAAQ,EAAEG;AAArD;AAAA;AAAA;AAAA;AAAA,YADA,GAEC,iBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA7DD;;GAAMtB,G;;KAAAA,G;AA+DN,eAAeA,GAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport Header from './Components/Header'\nimport Tasks from './Components/Tasks'\nimport AddTask from './Components/AddTask'\n\nconst App =()=> {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n  \n  useEffect(()=>{\n    const getTasks = async() => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n    getTasks()\n  },[])\n\n  //fetch data\n  const fetchTasks = async() => {\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n    return data\n  }\n\n  //Add Task\n  const addTask = async(task) => {\n    const res = await fetch('http://localhost:5000/tasks',{\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n    const data = res.json()\n\n    setTasks([...tasks, data])\n    // const id = Math.floor(Math.random()*10000) + 1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  }\n\n  //Delete Task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks${id}`,{\n      method: 'DELETE'\n    })\n    setTasks(tasks.filter((task) => task.id!==id))\n    \n  }\n\n  //Toggle reminder\n  const toggleRemainder = (id) =>{\n    setTasks(tasks.map((task)=> task.id ===id ? \n    {...task,reminder: !task.reminder}: task))\n  }\n  \n  return (\n    <div className=\"container\">\n      <Header onAdd={()=> setShowAddTask(!showAddTask)}\n      showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd={addTask}/>}\n      {tasks.length > 0 ? \n      (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleRemainder}/>):\n       ('No task to Show')}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}